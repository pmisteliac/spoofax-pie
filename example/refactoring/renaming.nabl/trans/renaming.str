module renaming

imports
	signatures/-
	nabl2/api
	libspoofax/stratego/debug
	libspoofax/ui/dialogs

	signatures/nabl2/shared/common/-
  signatures/nabl2/runtime/common/-

rules // menu action strategies
  rename-action(pp) :
    (selected-term, _, ast, path, project-path) -> (filename, result)
    where
    	analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
	    check-selection(|selected-term, ast)
	    ; selected-occ := <find-occurrence(|analysis)> selected-term
	    ; resolution-relation := <calc-resolution-relation> analysis
	    ; target-indices := <calc-name-cluster> (selected-occ, resolution-relation)
			; new-name := <read-new-name> path
			; renamed-ast := <rename-ast(|target-indices, new-name)> ast
	    ; check-capture(|renamed-ast, resolution-relation, path)
	    ; filename := <compose-filename> path
	    ; result := <pp> renamed-ast

  rename-action-debug(pp) :
    (selected-term, _, ast, path, project-path) -> (filename, result)
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
	    check-selection(|selected-term, ast)
	    ; selected-occ := <find-occurrence(|analysis)> selected-term
	    ; <ppdebug(|"selected-occ: ")> selected-occ
	    ; resolution-relation := <calc-resolution-relation> analysis
	    ; <ppdebug(|"resolution-relation: ")> resolution-relation
	    ; target-indices := <calc-name-cluster> (selected-occ, resolution-relation)
	    ; <ppdebug(|"target-indices: ")> target-indices
			; new-name := "bar"
			; renamed-ast := <rename-ast(|target-indices, new-name)> ast
	    ; check-capture(|renamed-ast, resolution-relation, path)
	    ; filename := <guarantee-extension(|"refactored.tig")> path
	    ; result := <pp> renamed-ast


rules // Step 1: Find occurrence in selection
  find-occurrence(|analysis): term -> occ-index
  where
  	occs := <get-all-occs(|analysis)> analysis
  	; occ := <collect-one(get-occurrence(|occs))> term
  	; occ-index := <get-term-index-from-occ> occ

  get-all-occs(|analysis): ast -> occs
	where
		decs := <nabl2-get-all-decls(|analysis)> ast
    ; refs  := <nabl2-get-all-refs(|analysis)> ast
    ; occs := <conc> (decs, refs)
    // add nup

	get-occurrence(|occs): term -> occurrence
	where
		<is-string> term
		; term-index := <nabl2-get-ast-index> term
		; occurrence := <fetch-elem(occ-eq-term-index(|term-index))> occs

	occ-eq-term-index(|target-term-index): occ@Occurrence(_, _, term-index) -> occ
	where
		<?target-term-index> term-index

rules // Step 2: Find all terms to rename
  calc-resolution-relation: analysis -> user-defined-relation
  where
  	refs  := <nabl2-get-all-refs(|analysis)> analysis
  	; relation := <map(get-dec-ref-index(|analysis))> refs
  	; user-defined-relation := <filter(is-not-built-in)> relation

  is-not-built-in: (ref, dec@TermIndex(path, num-index)) -> <id>
  where
  	<not(eq)> (num-index, 0)

  get-dec-ref-index(|analysis) : ref -> (ref-index, dec-index)
  where
  	(dec, _) := <nabl2-get-resolved-name(|analysis)> ref
  	; ref-index := <get-term-index-from-occ> ref
  	; dec-index := <get-term-index-from-occ> dec

  get-term-index-from-occ: Occurrence(_, name, term-index) -> term-index

rules //Step 3: Rename terms

	rename-ast(|target-indices, new-name): ast -> renamed-ast
	where
		renamed-ast := <bottomup(try(rename(|target-indices, new-name)))> ast

  rename(|target-indices, new-name): t -> new-name
	where
		<is-string> t
	 	; term-index := <nabl2-get-ast-index> t
	  ; <elem> (term-index, target-indices)

rules //Step 4: Checking for capture

  check-capture(|renamed-ast, resolution-relation, path) =
		(new-renamed-ast, new-analysis, _, _, _) := <nabl2-analyze-ast(|path)> renamed-ast
		; old-resolution-relation := <qsort(dec-ref-pair-gt)> resolution-relation
		; new-resolution-relation := <calc-resolution-relation; qsort(dec-ref-pair-gt)> new-analysis
		; <ppdebug(|"old-resolution-relation: ")> old-resolution-relation
		; <ppdebug(|"new-resolution-relation: ")> new-resolution-relation
		; <show-error-on-fail(eq|"Capture detecte", "This renaming leads to name capture")> (old-resolution-relation, new-resolution-relation)

		dec-ref-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
		where
			<term-index-gt> (ref-1, ref-2)

		term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
		where
			<gt> (num-index-1, num-index-2)

rules // UI strategies

	compose-filename: path -> filename
	where
		path-parts := <string-tokenize(|['.'])>
		; file-extension := <last> path-parts
		; new-file-extension := <conc-strings> ("refactored.", file-extension)
		; filename := <guarantee-extension(|new-file-extension)> path

	read-new-name: _ -> new-name
	where
   new-name := <show-input-dialog(|"Rename", "")> "Enter a new name"

  check-selection(|selected-term, ast) =
    <show-error-on-fail(not(eq)|"Invalid selection", "Please select a name")> (selected-term, ast)

  show-error-on-fail(s|title, message) =
  	s <+ <show-dialog(|title, "ERROR")> message ; fail

rules // Utility strategies
	add-elem: (new-elem, list) -> [new-elem | list]

rules // external rules
	external calc-name-cluster(|)

